{"version":3,"sources":["components/Footer.js","components/Hero.js","pages/HomePage.js","pages/AboutPage.js","pages/ContactPage.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","Container","fluid","Row","Col","md","sm","Hero","props","Jumbotron","title","subtitle","text","HomePage","AboutPage","ContactPage","App","state","headerLinks","path","home","about","contact","Navbar","bg","expand","Brand","Toggle","aria-controls","Collapse","id","Nav","to","exact","render","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yUAsBeA,MAjBf,WACI,OACI,4BAAQC,UAAU,QACd,kBAACC,EAAA,EAAD,CAAWC,OAAO,GACd,kBAACC,EAAA,EAAD,CAAKH,UAAU,0CACX,kBAACI,EAAA,EAAD,CAAKJ,UAAU,MAAMK,GAAI,EAAGC,GAAI,IAAhC,eAGA,kBAACF,EAAA,EAAD,CAAKJ,UAAU,iCAAiCK,GAAI,GAApD,0C,QCMLE,MAhBf,SAAcC,GACV,OACI,kBAACC,EAAA,EAAD,CAAWT,UAAU,sCACjB,kBAACC,EAAA,EAAD,CAAWC,OAAO,GACd,kBAACC,EAAA,EAAD,CAAKH,UAAU,+BACX,kBAACI,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,IACXE,EAAME,OAAS,wBAAIV,UAAU,gCAAgCQ,EAAME,OACnEF,EAAMG,UAAY,wBAAIX,UAAU,+BAA+BQ,EAAMG,UACrEH,EAAMI,MAAQ,wBAAIZ,UAAU,0BAA0BQ,EAAMI,WCFtEC,MANf,SAAkBL,GACd,OACI,kBAAC,EAAD,CAAME,MAAOF,EAAME,MAAOC,SAAUH,EAAMG,SAAUC,KAAMJ,EAAMI,QCGzDE,MANf,SAAmBN,GACf,OACI,gDCIOO,MANf,SAAqBP,GACjB,OACI,kDCsEOQ,G,kBAxDb,WAAYR,GAAQ,IAAD,8BACjB,4CAAMA,KAEDS,MAAQ,CACXP,MAAO,cACPQ,YAAa,CACX,CAAER,MAAO,OAAQS,KAAM,cACvB,CAAET,MAAO,QAASS,KAAM,oBACxB,CAAET,MAAO,UAAWS,KAAM,uBAE5BC,KAAM,CACJV,MAAO,UACPC,SAAU,sBACVC,KAAM,wBAERS,MAAO,CACLX,MAAO,YAETY,QAAS,CACPZ,MAAO,eAnBM,E,sEAyBT,IAAD,OACP,OACE,kBAAC,IAAD,KACE,kBAACT,EAAA,EAAD,CAAWD,UAAU,MAAME,OAAO,GAEhC,kBAACqB,EAAA,EAAD,CAAQvB,UAAU,gBAAgBwB,GAAG,cAAcC,OAAO,MAExD,kBAACF,EAAA,EAAOG,MAAR,oBACA,kBAACH,EAAA,EAAOI,OAAR,CAAeC,gBAAc,kBAC7B,kBAACL,EAAA,EAAOM,SAAR,CAAiBC,GAAG,iBAClB,kBAACC,EAAA,EAAD,CAAK/B,UAAU,WACb,kBAAC,IAAD,CAAMA,UAAU,WAAWgC,GAAG,cAA9B,QACA,kBAAC,IAAD,CAAMhC,UAAU,WAAWgC,GAAG,oBAA9B,SACA,kBAAC,IAAD,CAAMhC,UAAU,WAAWgC,GAAG,sBAA9B,cAMN,kBAAC,IAAD,CAAOb,KAAK,aAAac,OAAK,EAACC,OAAQ,kBAAM,kBAAC,EAAD,CAAUxB,MAAO,EAAKO,MAAMG,KAAKV,MAAOC,SAAU,EAAKM,MAAMG,KAAKT,SAAUC,KAAM,EAAKK,MAAMG,KAAKR,UAC/I,kBAAC,IAAD,CAAOO,KAAK,mBAAmBc,OAAK,EAACC,OAAQ,kBAAM,kBAAC,EAAD,CAAWxB,MAAO,EAAKO,MAAMI,MAAMX,WACtF,kBAAC,IAAD,CAAOS,KAAK,qBAAqBc,OAAK,EAACC,OAAQ,kBAAM,kBAAC,EAAD,CAAaxB,MAAO,EAAKO,MAAMK,QAAQZ,WAE5F,kBAAC,EAAD,Y,GAlDQyB,IAAMC,YCJJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6d03de6d.chunk.js","sourcesContent":["import React from 'react'\r\nimport Container from 'react-bootstrap/Container'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Col from 'react-bootstrap/Col'\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"mt-5\">\r\n            <Container fluid={true}>\r\n                <Row className=\"border-top justify-content-between p-3\">\r\n                    <Col className=\"p-0\" md={3} sm={12}>\r\n                        Mihaly Elod\r\n                    </Col>\r\n                    <Col className=\"p-0 d-flex justify-content-end\" md={3}>\r\n                        This site was made by Mihaly Elod.\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React from 'react'\r\nimport { Jumbotron, Container, Row, Col } from 'react-bootstrap'\r\n\r\nfunction Hero(props) {\r\n    return (\r\n        <Jumbotron className=\"bg-transparent jumbotron-fluid p-0\">\r\n            <Container fluid={true}>\r\n                <Row className=\"justify-content-center py-5\">\r\n                    <Col md={8} sm={12}>\r\n                        {props.title && <h1 className=\"display-1 font-weight-bolder\">{props.title}</h1>}\r\n                        {props.subtitle && <h2 className=\"display-4 font-weight-light\">{props.subtitle}</h2>}\r\n                        {props.text && <h3 className=\"lead font-weight-light\">{props.text}</h3>}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </Jumbotron>\r\n    )\r\n}\r\n\r\nexport default Hero\r\n","import React from 'react'\r\nimport Hero from '../components/Hero'\r\n\r\nfunction HomePage(props) {\r\n    return (\r\n        <Hero title={props.title} subtitle={props.subtitle} text={props.text} />\r\n    )\r\n}\r\n\r\nexport default HomePage\r\n","import React from 'react'\r\n\r\nfunction AboutPage(props) {\r\n    return (\r\n        <p>About page works</p>\r\n    )\r\n}\r\n\r\nexport default AboutPage\r\n","import React from 'react'\r\n\r\nfunction ContactPage(props) {\r\n    return (\r\n        <p>Contact page works</p>\r\n    )\r\n}\r\n\r\nexport default ContactPage\r\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport Container from 'react-bootstrap/Container';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Footer from './components/Footer';\nimport HomePage from './pages/HomePage';\nimport AboutPage from './pages/AboutPage';\nimport ContactPage from './pages/ContactPage';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      title: 'Mihaly Elod',\n      headerLinks: [\n        { title: 'Home', path: '/portfolio' },\n        { title: 'About', path: '/portfolio/about' },\n        { title: 'Contact', path: '/portfolio/contact' }\n      ],\n      home: {\n        title: 'Welcome',\n        subtitle: 'This is my web page',\n        text: 'Ez a szoveg helye...'\n      },\n      about: {\n        title: 'About me'\n      },\n      contact: {\n        title: 'Let\\'s talk'\n      }\n    }\n  }\n\n\n  render() {\n    return (\n      <Router>\n        <Container className=\"p-0\" fluid={true}>\n\n          <Navbar className=\"border-bottom\" bg=\"transparent\" expand=\"lg\">\n\n            <Navbar.Brand>Mihaly Elod</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"navbar-toogle\"/>\n            <Navbar.Collapse id=\"navbar-toogle\">\n              <Nav className=\"ml-auto\">\n                <Link className=\"nav-link\" to=\"/portfolio\">Home</Link>\n                <Link className=\"nav-link\" to=\"/portfolio/about\">About</Link>\n                <Link className=\"nav-link\" to=\"/portfolio/contact\">Contact</Link>\n              </Nav>\n            </Navbar.Collapse>\n\n          </Navbar>\n\n          <Route path=\"/portfolio\" exact render={() => <HomePage title={this.state.home.title} subtitle={this.state.home.subtitle} text={this.state.home.text} />} />\n          <Route path=\"/portfolio/about\" exact render={() => <AboutPage title={this.state.about.title}  />} />\n          <Route path=\"/portfolio/contact\" exact render={() => <ContactPage title={this.state.contact.title}  />} />\n\n          <Footer />\n\n        </Container>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}